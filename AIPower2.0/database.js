// database.js
// Optimalizovan√° datab√°za inform√°ci√≠ o spoloƒçnosti AI Power s pokroƒçil√Ωmi funkciami

// Cache syst√©m pre r√Ωchle odpovede
const responseCache = new Map();
const maxCacheSize = 50;

// Hlavn√° datab√°za s vylep≈°enou ≈°trukt√∫rou
window.aiPowerData = {
  // Z√°kladn√© inform√°cie o spoloƒçnosti
  company: {
    name: "AI Power",
    founded: 2025,
    founders: ["Marcel Lehocky"],
    ceo: "Neuveden√©",
    headquarters: "Bratislava, Slovensko",
    employees: "Neuveden√©",
    description: "Slovensk√° agent√∫ra ≈°pecializovan√° na tvorbu AI chatbotov na mieru. Vytv√°ra inteligentn√Ωch asistentov, ktor√≠ hovoria va≈°√≠m jazykom a poznaj√∫ va≈°e podnikanie.",
    philosophy: "U≈°etri≈• firm√°m ƒças a peniaze prostredn√≠ctvom inteligentn√Ωch chatbotov a zlep≈°i≈• spokojnos≈• z√°kazn√≠kov.",
    hasRnD: true,
    categories: ["AI Chatboty", "Automatiz√°cia", "Digit√°lni asistenti"]
  },

  // Kontaktn√© inform√°cie
  contact: {
    website: "https://www.aipower.site",
    email: "info@aipower.site",
    phone: "+421 904 603 171",
    booking: {
      calendly: "https://calendly.com/aipoweragency/new-meeting?month=2025-08"
    }
  },

  // Lok√°cie a pracovn√© hodiny
  locations: {
    headquarters: {
      city: "Bratislava",
      address: "Slovensko",
      workingHours: {
        monday: "8:00‚Äì17:00",
        tuesday: "8:00‚Äì17:00",
        wednesday: "8:00‚Äì17:00",
        thursday: "8:00‚Äì17:00",
        friday: "8:00‚Äì16:00",
        saturday: "zatvoren√©",
        sunday: "zatvoren√©"
      }
    }
  },

  // Slu≈æby s detailnej≈°ou ≈°trukt√∫rou
  services: {
    main: [
      {
        id: "basic-chatbot",
        name: "AI Chatbot na mieru",
        price: {
          setup: 300,
          monthly: 50,
          currency: "EUR"
        },
        features: [
          "Odpovede na najƒçastej≈°ie ot√°zky",
          "24/7 dostupnos≈•",
          "Zber kontaktov", 
          "√ödr≈æba a drobn√© √∫pravy"
        ],
        description: "Z√°kladn√° verzia AI chatbota pre v√°≈° web",
        category: "basic"
      }
    ],
    premium: [
      {
        id: "premium-features",
        name: "Voliteƒæn√© pr√©miov√© funkcie",
        price: {
          perFeature: 50,
          currency: "EUR"
        },
        features: [
          "Vyhƒæad√°vanie vo va≈°ej datab√°ze",
          "Pokroƒçil√© integr√°cie (Google Sheets, CRM)",
          "Rezervaƒçn√Ω syst√©m",
          "Multijazyƒçn√Ω re≈æim",
          "ƒéal≈°ie funkcie podƒæa potrieb"
        ],
        description: "Mo≈ænosti roz≈°√≠renia z√°kladn√©ho chatbota",
        category: "premium"
      }
    ]
  },

  // Partnerstv√° a udr≈æateƒænos≈•
  partnerships: [],
  sustainability: {
    initiatives: [
      "Digit√°lne procesy ‚Äì minimaliz√°cia papierovej administrat√≠vy",
      "Cloudov√© rie≈°enia s n√≠zkou spotrebou energie"
    ]
  },

  // Compliance a certifik√°cie
  compliance: {
    gdpr: true,
    certifications: []
  }
};

// Valid√°cia datab√°zy
function validateDatabase() {
  const required = ['company', 'contact', 'services'];
  const missing = required.filter(key => !window.aiPowerData[key]);
  
  if (missing.length > 0) {
    console.error('Ch√Ωbaj√∫ce √∫daje v datab√°ze:', missing);
    return false;
  }
  return true;
}

// Bezpeƒçn√© z√≠skanie √∫dajov s fallback
function safeGet(path, defaultValue = 'Inform√°cia nie je dostupn√°') {
  try {
    return path.split('.').reduce((obj, key) => obj?.[key], window.aiPowerData) || defaultValue;
  } catch {
    return defaultValue;
  }
}

// Cache funkcie
function getCachedResponse(messageHash) {
  return responseCache.get(messageHash);
}

function setCachedResponse(messageHash, response) {
  if (responseCache.size >= maxCacheSize) {
    const firstKey = responseCache.keys().next().value;
    responseCache.delete(firstKey);
  }
  responseCache.set(messageHash, response);
}

// Optimalizovan√© vyhƒæad√°vanie s kateg√≥riami
function getQuickReply(normalizedMessage) {
  // Vytvor hash pre cache
  const messageHash = btoa(normalizedMessage).substring(0, 10);
  
  // Skontroluj cache
  const cached = getCachedResponse(messageHash);
  if (cached) {
    return cached;
  }

  const categories = {
    pricing: {
      keywords: ['cena', 'kolko', 'stoji', 'cennik', 'ceny', 'sluzby', 'ponuka'],
      handler: () => {
        const mainServices = window.aiPowerData.services.main
          .map(s => `‚Ä¢ ${s.name}: ‚Ç¨${s.price.setup} jednorazovo + ‚Ç¨${s.price.monthly}/mesiac`)
          .join('<br>');
        const premiumServices = window.aiPowerData.services.premium
          .map(s => `‚Ä¢ ${s.name}: ‚Ç¨${s.price.perFeature} za funkciu`)
          .join('<br>');
        return `Na≈°e slu≈æby a ceny:<br>${mainServices}<br>${premiumServices}`;
      }
    },
    
    contact: {
      keywords: ['kontakt', 'telefon', 'email', 'mail', 'ciselko', 'tvoje', 'cislo'],
      handler: () => {
        const c = window.aiPowerData.contact;
        return `Kontakt na n√°s:<br>üìû ${c.phone}<br>üìß ${c.email}<br>üåê ${c.website}`;
      }
    },
    
    address: {
      keywords: ['adresa', 'kde', 'ste', 'sa', 'nachadza', 'nachadzate', 'sidli', 'lokacia', 'mapa', 'najdem'],
      handler: () => {
        const hq = window.aiPowerData.locations.headquarters;
        return `Na≈°a hlavn√° adresa je:<br>${hq.city}, ${hq.address}`;
      }
    },
    
    history: {
      keywords: ['zalozena', 'kedy', 'vznikla', 'rok', 'vzniku', 'historia', 'firmy'],
      handler: () => `Firma ${window.aiPowerData.company.name} bola zalo≈æen√° v roku ${window.aiPowerData.company.founded}.`
    },
    
    management: {
      keywords: ['konatel', 'zakladatel', 'kto', 'zalozil', 'founder', 'riaditel'],
      handler: () => {
        if (normalizedMessage.includes('riaditel')) {
          return `V√Ωkonn√Ω riaditeƒæ: ${window.aiPowerData.company.ceo}.`;
        }
        return `Zakladateƒæ: ${window.aiPowerData.company.founders.join(", ")}.`;
      }
    },
    
    hours: {
      keywords: ['pracovne', 'hodiny', 'otvorene', 'kedy', 'mozem', 'prist', 'mate', 'otvaracie'],
      handler: () => {
        const hours = window.aiPowerData.locations.headquarters.workingHours;
        const dayNames = {
          monday: 'Pondelok', tuesday: 'Utorok', wednesday: 'Streda',
          thursday: '≈†tvrtok', friday: 'Piatok', saturday: 'Sobota', sunday: 'Nedeƒæa'
        };
        return "Pracovn√© hodiny:<br>" +
          Object.entries(hours)
            .map(([day, time]) => `${dayNames[day]}: ${time}`)
            .join('<br>');
      }
    },
    
    partners: {
      keywords: ['partner', 'spolupraca', 'kym', 'spolupracujete'],
      handler: () => {
        return window.aiPowerData.partnerships.length
          ? `Na≈°i partneri:<br>‚Ä¢ ${window.aiPowerData.partnerships.join('<br>‚Ä¢ ')}`
          : "Moment√°lne nem√°me ofici√°lne partnerstv√°.";
      }
    },
    
    description: {
      keywords: ['popis', 'co', 'robi', 'zaobera', 'funkcia', 'profil', 'firmy'],
      handler: () => window.aiPowerData.company.description
    },
    
    philosophy: {
      keywords: ['filozofia', 'vizia', 'hodnoty', 'poslanie'],
      handler: () => window.aiPowerData.company.philosophy
    },
    
    sustainability: {
      keywords: ['udrzatelnost', 'ekologicke', 'zelene', 'csr'],
      handler: () => {
        const initiatives = window.aiPowerData.sustainability.initiatives;
        return `Opatrenia udr≈æateƒænosti:<br>‚Ä¢ ${initiatives.join('<br>‚Ä¢ ')}`;
      }
    },
    
    employees: {
      keywords: ['pocet', 'zamestnancov', 'kolko', 'vas', 'je', 'mate'],
      handler: () => `Poƒçet zamestnancov: ${window.aiPowerData.company.employees}.`
    },
    
    booking: {
      keywords: ['stretnutie', 'meeting', 'rezervacia', 'calendly', 'zavolat', 'book', 'objednat', 'termin'],
      handler: () => {
        const link = window.aiPowerData.contact.booking.calendly;
        return `Tu si m√¥≈æe≈° rezervova≈• stretnutie: <a href="${link}" target="_blank">Rezervova≈• cez Calendly</a>`;
      }
    },
    
    research: {
      keywords: ['r&d', 'vyskum', 'vyvoj', 'research', 'development'],
      handler: () => {
        return window.aiPowerData.company.hasRnD
          ? "√Åno, venujeme sa aj v√Ωskumu a v√Ωvoju AI rie≈°en√≠."
          : "Nie, moment√°lne nem√°me vlastn√© R&D oddelenie.";
      }
    }
  };

  // Efekt√≠vne vyhƒæad√°vanie
  for (const [category, config] of Object.entries(categories)) {
    if (config.keywords.some(keyword => normalizedMessage.includes(keyword))) {
      const response = config.handler();
      // Ulo≈æi≈• do cache
      setCachedResponse(messageHash, response);
      return response;
    }
  }
  
  return null;
}

// Inicializ√°cia - validuj datab√°zu pri naƒç√≠tan√≠
if (typeof window !== 'undefined') {
  validateDatabase();
}

// Backward compatibility - zachov√°va star√© n√°zvy pre existuj√∫ci k√≥d
Object.defineProperty(window.aiPowerData, 'sluzby', {
  get() {
    return this.services.main.map(s => ({
      nazov: s.name,
      cena: `‚Ç¨${s.price.setup} jednorazovo + ‚Ç¨${s.price.monthly} / mesiac`,
      popis: s.description
    }));
  }
});

Object.defineProperty(window.aiPowerData, 'kontakty', {
  get() { return this.contact; }
});

Object.defineProperty(window.aiPowerData, 'pracovne_hodiny', {
  get() { return this.locations.headquarters.workingHours; }
});

Object.defineProperty(window.aiPowerData, 'zalozena', {
  get() { return this.company.founded; }
});

Object.defineProperty(window.aiPowerData, 'zakladatelia', {
  get() { return this.company.founders; }
});

Object.defineProperty(window.aiPowerData, 'vykonnyriaditel', {
  get() { return [this.company.ceo]; }
});

Object.defineProperty(window.aiPowerData, 'sidlo', {
  get() { return this.company.headquarters; }
});

Object.defineProperty(window.aiPowerData, 'poboƒçky', {
  get() { 
    return [{
      mesto: this.locations.headquarters.city,
      adresa: this.locations.headquarters.address
    }];
  }
});

Object.defineProperty(window.aiPowerData, 'popis', {
  get() { return this.company.description; }
});

Object.defineProperty(window.aiPowerData, 'filozofia', {
  get() { return this.company.philosophy; }
});

Object.defineProperty(window.aiPowerData, 'partnerstv√°', {
  get() { return this.partnerships; }
});

Object.defineProperty(window.aiPowerData, 'udr≈æateƒænos≈•', {
  get() { return { opatrenia: this.sustainability.initiatives }; }
});

Object.defineProperty(window.aiPowerData, 'pocet_zamestnancov', {
  get() { return this.company.employees; }
});

Object.defineProperty(window.aiPowerData, 'r_and_d', {
  get() { return this.company.hasRnD; }
});

Object.defineProperty(window.aiPowerData, 'GDPR', {
  get() { return this.compliance.gdpr; }
});

Object.defineProperty(window.aiPowerData, 'booking', {
  get() { return this.contact.booking; }
});
